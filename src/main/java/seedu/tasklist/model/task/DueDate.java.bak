package seedu.tasklist.model.task;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

import seedu.tasklist.commons.exceptions.IllegalValueException;

/**
 * Represents a Task's due date in the task list. Guarantees: immutable; is
 * valid as declared in {@link #isValidDate(String)}
 */
public class DueDate {
<<<<<<< HEAD
    
    public static final String MESSAGE_DUEDATE_CONSTRAINTS = "DueDate should be numeric only";
    public static final String DATE_VALIDATION_REGEX = "^(?:[0-9 ]+|)$";
=======
>>>>>>> 55b5b6605d07117818452be4622b4370be025718

    public static final String MESSAGE_DUEDATE_CONSTRAINTS = "Due date should be numeric only";
    public static final String DATE_VALIDATION_REGEX = "^(?:[0-9 ]+|)$";

    public LocalDateTime dueDate;

    /**
     * Validates given due date.
     *
     * @throws IllegalValueException
     *             if given due date string is invalid.
     */
    public DueDate(String dueDate) throws IllegalValueException {
        assert dueDate != null;
        if (!isValidDate(dueDate)) {
            throw new IllegalValueException(MESSAGE_DUEDATE_CONSTRAINTS);
        }

        if (!dueDate.isEmpty()) {
            if (dueDate.length() == 13) {
                this.dueDate = LocalDateTime.of(Integer.parseInt(dueDate.substring(4, 8)),
                        Integer.parseInt(dueDate.substring(2, 4)), Integer.parseInt(dueDate.substring(0, 2)),
                        Integer.parseInt(dueDate.substring(9, 11)), Integer.parseInt(dueDate.substring(11, 13)));
            } else {
                this.dueDate = LocalDateTime.of(Integer.parseInt(dueDate.substring(4, 8)),
                        Integer.parseInt(dueDate.substring(2, 4)), Integer.parseInt(dueDate.substring(0, 2)), 23, 59);
            }
        }
    }

    /**
     * Returns true if a given string is a valid date.
     */
    public static boolean isValidDate(String test) {
        return test.matches(DATE_VALIDATION_REGEX);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
        return dueDate.toString();
=======
        if (dueDate != null) {
            DateTimeFormatter df = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");
            return df.format(dueDate);
        } else {
            return "";
        }
>>>>>>> 55b5b6605d07117818452be4622b4370be025718
    }

    @Override
    public boolean equals(Object other) {
        return other == this // short circuit if same object
                || (other instanceof DueDate // instanceof handles nulls
                        && this.dueDate.equals(((DueDate) other).dueDate)); // state
                                                                            // check
    }

    @Override
    public int hashCode() {
        return dueDate.hashCode();
    }

}